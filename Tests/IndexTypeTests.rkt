#lang racket

(module+ test
  (require "../IndexTypes.rkt"
           "../IndexTypingRules.rkt"
           redex)

  #;(define dummy-store '(() (table ()) (memory ())))

  (define empty-context `((func ()) (global ()) (table) (memory) (local ()) (label ()) (return)))

  #;(test-judgment-holds ⊢
   (derivation `(⊢ ,empty-context ((if ((((i32 a) (i32 b)) empty) -> ((i32 c) empty))
                                       (i32 div/unsafe)
                                       (i32 const -1))
                   (((i32 a) (i32 b) (i32 b)) (((empty (a : i32)) (b : i32)) (>= b 0)))
                   ))))

  (test-judgment-holds ⊢
                       (derivation `(⊢ ,empty-context ((i32 sub))
                                             ((((i32 b) (i32 c)) () (((empty (i32 a)) (i32 b)) (i32 c)) (empty (not (= b c))))
                                              ->
                                              (((i32 d))
                                               ()
                                               ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                               ((empty (not (= b c))) (= d (sub b c))))))
                                         "Binop"
                                         (list)))

  (test-judgment-holds ⊢
                       (derivation `(⊢ ,empty-context ((i32 sub))
                                       ((((i32 a) (i32 b) (i32 c))
                                         ()
                                         (((empty (i32 a)) (i32 b)) (i32 c))
                                         (empty (not (= b c))))
                                        ->
                                        (((i32 a) (i32 d))
                                         ()
                                         ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                         ((empty (not (= b c))) (= d (sub b c))))))
                                   "Stack-Poly"
                                   (list
                             (derivation `(⊢ ,empty-context ((i32 sub))
                                             ((((i32 b) (i32 c)) () (((empty (i32 a)) (i32 b)) (i32 c)) (empty (not (= b c))))
                                              ->
                                              (((i32 d))
                                               ()
                                               ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                               ((empty (not (= b c))) (= d (sub b c))))))
                                         "Binop"
                                         (list)))))

  (test-judgment-holds ⊢
                       (derivation `(⊢ ,empty-context ((i32 div/unsafe))
                                ((((i32 a) (i32 d))
                                  ()
                                  ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                  ((empty (not (= d (i32 0)))) (= d (sub b c))))
                                 ->
                                 (((i32 e))
                                  ()
                                  (((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d)) (i32 e))
                                  (((empty (not (= d (i32 0)))) (= d (sub b c))) (= e (div a d))))))
                            "Div-Prechk"
                            (list)))

  (test-judgment-holds ⊢
                       (derivation `(⊢ ,empty-context ((i32 sub) (i32 div/unsafe))
                                       ((((i32 a) (i32 b) (i32 c))
                                         ()
                                         (((empty (i32 a)) (i32 b)) (i32 c))
                                         (empty (not (= b c))))
                                        ->
                                        (((i32 e))
                                         ()
                                         (((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d)) (i32 e))
                                         (((empty (not (= b c))) (= d (sub b c))) (= e (div a d))))))
                                   "Composition"
                                   (list
                                    (derivation `(⊢ ,empty-context ((i32 sub))
                                                    ((((i32 a) (i32 b) (i32 c))
                                                      ()
                                                      (((empty (i32 a)) (i32 b)) (i32 c))
                                                      (empty (not (= b c))))
                                                     ->
                                                     (((i32 a) (i32 d))
                                                      ()
                                                      ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                                      ((empty (not (= b c))) (= d (sub b c))))))
                                                "Stack-Poly"
                                                (list
                                                 (derivation `(⊢ ,empty-context ((i32 sub))
                                                                 ((((i32 b) (i32 c))
                                                                   ()
                                                                   (((empty (i32 a)) (i32 b)) (i32 c))
                                                                   (empty (not (= b c))))
                                                                  ->
                                                                  (((i32 d))
                                                                   ()
                                                                   ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                                                   ((empty (not (= b c))) (= d (sub b c))))))
                                                             "Binop"
                                                             (list))))
                                    (derivation `(⊢ ,empty-context ((i32 div/unsafe))
                                                    ((((i32 a) (i32 d))
                                                      ()
                                                      ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                                      ((empty (not (= b c))) (= d (sub b c))))
                                                     ->
                                                     (((i32 e))
                                                      ()
                                                      (((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d)) (i32 e))
                                                      (((empty (not (= b c))) (= d (sub b c))) (= e (div a d))))))
                                                "Div-Prechk"
                                                (list)))))

  ;; This case worked in Adam's brain, but not in practice due to possible integer overflow (interesting to note that we catch possible overflow errors!)
  #;(test-judgment-holds ⊢ (derivation `(⊢ ((func
                                           (((((i32 a)) () ((empty (i32 a)) (lt a (i32 0)))) -> (((i32 b)) () (((empty (i32 a)) (i32 b)) (gt b (i32 0)))))
                                            ((((i32 a)) () (empty (i32 a))) -> (((i32 b)) () (((empty (i32 a)) (i32 b)) (= b (add a (i32 1))))))
                                            ((((i32 a)) () (empty (i32 a))) -> (((i32 b)) () ((empty (i32 a)) (i32 b))))
                                            ((((i32 a) (i32 b)) () ((empty (i32 a)) (i32 b))) -> (((i32 c)) () (((empty (i32 a)) (i32 b)) (i32 c))))))
                                          (global ())
                                          (table (3 (0 1 2)))
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((call-indirect/unsafe ((((i32 a)) () (empty (i32 a)))
                                                                 -> (((i32 b)) () (((empty (i32 a)) (i32 b)) (gt b a))))))
                                         ((((i32 a) (i32 c)) () (((empty (i32 a)) (i32 c)) (= c (i32 1))))
                                          -> (((i32 b)) () (((empty (i32 a)) (i32 b)) (gt b a)))))
                                     #f
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func ())
                                          (global ())
                                          (table (3 (((((i32 a)) () (empty (i32 a)) (empty (= (i32 1) (lt a (i32 0)))))
                                                      -> (((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0))))))
                                                     ((((i32 a)) () (empty (i32 a)) empty) -> (((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b a)))))
                                                     ((((i32 a)) () (empty (i32 a)) empty) -> (((i32 b)) () ((empty (i32 a)) (i32 b)) empty)))))
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((call-indirect/unsafe ((((i32 a)) () (empty (i32 a)) empty)
                                                                 -> (((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b a)))))))
                                         ((((i32 a) (i32 c))
                                           ()
                                           ((empty (i32 a)) (i32 c))
                                           (empty (= c (i32 1))))
                                          -> (((i32 b))
                                              ()
                                              (((empty (i32 a)) (i32 c)) (i32 b))
                                              ((empty (= c (i32 1))) (= (i32 1) (gt b a))))))
                                     "Call-Indirect-Prechk"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func ())
                                          (global ())
                                          (table)
                                          (memory 4096)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((i32 load/unsafe 0 0))
                                         ((((i32 a))
                                           ()
                                           (empty (i32 a))
                                           ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))
                                          -> (((i32 b))
                                              ()
                                              ((empty (i32 a)) (i32 b))
                                              ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))))
                                     "Load-Prechk-1"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func ())
                                          (global ())
                                          (table)
                                          (memory 4096)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((i32 store/unsafe 0 0))
                                         ((((i32 a) (i32 b))
                                           ()
                                           ((empty (i32 a)) (i32 b))
                                           ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))
                                          -> (()
                                              ()
                                              ((empty (i32 a)) (i32 b))
                                              ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))))
                                     "Store-Prechk-1"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func ())
                                          (global ())
                                          (table)
                                          (memory 4096)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((i32 store/unsafe (i8) 0 0))
                                         ((((i32 a) (i32 b))
                                           ()
                                           ((empty (i32 a)) (i32 b))
                                           ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))
                                          -> (()
                                              ()
                                              ((empty (i32 a)) (i32 b))
                                              ((empty (= (i32 1) (lt a (i32 1000)))) (= (i32 1) (ge a (i32 0)))))))
                                     "Store-Prechk-2"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func ())
                                          (global ())
                                          (table)
                                          (memory)
                                          (local (i32))
                                          (label ())
                                          (return))
                                         ((set-local 0) (get-local 0))
                                         ((((i32 a)) ((i32 b)) ((empty (i32 a)) (i32 b)) empty)
                                          -> (((i32 a_2)) ((i32 a)) (((empty (i32 a)) (i32 b)) (i32 a_2)) (empty (= a_2 a)))))
                                     "Composition"
                                     (list
                                      (derivation `(⊢ ((func ())
                                                       (global ())
                                                       (table)
                                                       (memory)
                                                       (local (i32))
                                                       (label ())
                                                       (return))
                                                      ((set-local 0))
                                                      ((((i32 a)) ((i32 b)) ((empty (i32 a)) (i32 b)) empty)
                                                       -> (() ((i32 a)) ((empty (i32 a)) (i32 b)) empty)))
                                                  "Set-Local"
                                                  (list))
                                      (derivation `(⊢ ((func ())
                                                       (global ())
                                                       (table)
                                                       (memory)
                                                       (local (i32))
                                                       (label ())
                                                       (return))
                                                      ((get-local 0))
                                                      ((() ((i32 a)) ((empty (i32 a)) (i32 b)) empty)
                                                       -> (((i32 a_2)) ((i32 a)) (((empty (i32 a)) (i32 b)) (i32 a_2)) (empty (= a_2 a)))))
                                                  "Get-Local"
                                                  (list)))))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                  -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                          (global ())
                                          (table)
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((call 0))
                                         ((((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                          -> (((i32 c))
                                              ()
                                              (((empty (i32 a)) (i32 b)) (i32 c))
                                              ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))))
                                     "Call"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                  -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                          (global ())
                                          (table)
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((call 0))
                                         ((((i32 a) (i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                          -> (((i32 a) (i32 c))
                                              ()
                                              (((empty (i32 a)) (i32 b)) (i32 c))
                                              ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))))
                                     "Stack-Poly"
                                     (list
                                      (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                               -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                                       (global ())
                                                       (table)
                                                       (memory)
                                                       (local ())
                                                       (label ())
                                                       (return))
                                                      ((call 0))
                                                      ((((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                       -> (((i32 c))
                                                           ()
                                                           (((empty (i32 a)) (i32 b)) (i32 c))
                                                           ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))))
                                                  "Call"
                                                  (list)))))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                  -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                          (global ())
                                          (table)
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((i32 div))
                                         ((((i32 a) (i32 c))
                                           ()
                                           (((empty (i32 a)) (i32 b)) (i32 c))
                                           ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))
                                          -> (((i32 d))
                                              ()
                                              ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                              (((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))) (= d (div a c))))))
                                     "Binop"
                                     (list)))

  (test-judgment-holds ⊢ (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                  -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                          (global ())
                                          (table)
                                          (memory)
                                          (local ())
                                          (label ())
                                          (return))
                                         ((call 0) (i32 div))
                                         ((((i32 a) (i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                          -> (((i32 d))
                                              ()
                                              ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                              (((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))) (= d (div a c))))))
                                     "Composition"
                                     (list
                                      (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                               -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                                       (global ())
                                                       (table)
                                                       (memory)
                                                       (local ())
                                                       (label ())
                                                       (return))
                                                      ((call 0))
                                                      ((((i32 a) (i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                       -> (((i32 a) (i32 c))
                                                           ()
                                                           (((empty (i32 a)) (i32 b)) (i32 c))
                                                           ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))))
                                                  "Stack-Poly"
                                                  (list
                                                   (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                                            -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                                                    (global ())
                                                                    (table)
                                                                    (memory)
                                                                    (local ())
                                                                    (label ())
                                                                    (return))
                                                                   ((call 0))
                                                                   ((((i32 b)) () ((empty (i32 a)) (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                                    -> (((i32 c))
                                                                        ()
                                                                        (((empty (i32 a)) (i32 b)) (i32 c))
                                                                        ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))))
                                                               "Call"
                                                               (list))))
                                      (derivation `(⊢ ((func (((((i32 b)) () (empty (i32 b)) (empty (= (i32 1) (gt b (i32 0)))))
                                                               -> (((i32 c)) () ((empty (i32 b)) (i32 c)) (empty (= (i32 1) (gt c b)))))))
                                                       (global ())
                                                       (table)
                                                       (memory)
                                                       (local ())
                                                       (label ())
                                                       (return))
                                                      ((i32 div))
                                                      ((((i32 a) (i32 c))
                                                           ()
                                                           (((empty (i32 a)) (i32 b)) (i32 c))
                                                           ((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))))
                                                       -> (((i32 d))
                                                           ()
                                                           ((((empty (i32 a)) (i32 b)) (i32 c)) (i32 d))
                                                           (((empty (= (i32 1) (gt b (i32 0)))) (= (i32 1) (gt c b))) (= d (div a c))))))
                                                  "Binop"
                                                  (list)))))
)

